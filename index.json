{
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-3.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-3.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey The key type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-4.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-4.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>, ICrudRepository<TModel, TKey1, TKey2>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-5.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-5.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>, ICrudRepository<TModel, TKey1, TKey2, TKey3>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 2 type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbRepositoryBase-2.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbRepositoryBase-2.html",
    "title": "Class CosmoDbRepositoryBase<TOptions, TModel>",
    "keywords": "Class CosmoDbRepositoryBase<TOptions, TModel> This class is a base CosmoDb implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CosmoDbRepositoryBase<TOptions, TModel> Implements CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbRepositoryBase<TOptions, TModel> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. Constructors CosmoDbRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbRepositoryBase<TOptions, TModel> class. Declaration protected CosmoDbRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) Implements CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.html",
    "title": "Namespace CG.Linq.CosmoDb.Repositories",
    "keywords": "Namespace CG.Linq.CosmoDb.Repositories Classes CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. CosmoDbRepositoryBase<TOptions, TModel> This class is a base CosmoDb implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface."
  },
  "api/CG.Linq.CosmoDb.Repositories.Options.CosmoDbRepositoryOptions.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.Options.CosmoDbRepositoryOptions.html",
    "title": "Class CosmoDbRepositoryOptions",
    "keywords": "Class CosmoDbRepositoryOptions This class contains configuration settings for a CosmoDb repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase CG.Business.Repositories.Options.RepositoryOptions CG.Business.Repositories.Options.LinqRepositoryOptions CosmoDbRepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories.Options Assembly : CG.Linq.CosmoDb.dll Syntax public class CosmoDbRepositoryOptions : LinqRepositoryOptions, IValidatableObject Properties DatabaseId This property contains the database identifier to use with the repository. Declaration [Required(ErrorMessageResourceName = \"CosmoRepositoryOptions_DbId\", ErrorMessageResourceType = typeof(Resources))] public string DatabaseId { get; set; } Property Value Type Description System.String Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Linq.CosmoDb.Repositories.Options.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.Options.html",
    "title": "Namespace CG.Linq.CosmoDb.Repositories.Options",
    "keywords": "Namespace CG.Linq.CosmoDb.Repositories.Options Classes CosmoDbRepositoryOptions This class contains configuration settings for a CosmoDb repository."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.dll contains LINQ extensions used by other CodeGator packages."
  }
}
{
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-3.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-3.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey The key type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-4.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-4.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>, ICrudRepository<TModel, TKey1, TKey2>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-5.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbCrudRepositoryBase-5.html",
    "title": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>",
    "keywords": "Class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> Implements CG.Business.Repositories.ICrudRepository <TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> : CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>, ICrudRepository<TModel, TKey1, TKey2, TKey3>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 2 type associated with the model. Constructors CosmoDbCrudRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> class. Declaration protected CosmoDbCrudRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AddAsync(TModel, CancellationToken) Declaration public override Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken) AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() DeleteAsync(TModel, CancellationToken) Declaration public override Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) Declaration public override Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModel> Overrides CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken) Implements CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.CosmoDbRepositoryBase-2.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.CosmoDbRepositoryBase-2.html",
    "title": "Class CosmoDbRepositoryBase<TOptions, TModel>",
    "keywords": "Class CosmoDbRepositoryBase<TOptions, TModel> This class is a base CosmoDb implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CosmoDbRepositoryBase<TOptions, TModel> Implements CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories Assembly : CG.Linq.CosmoDb.dll Syntax public abstract class CosmoDbRepositoryBase<TOptions, TModel> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<CosmoDbRepositoryOptions> where TModel : class, IModel Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. Constructors CosmoDbRepositoryBase(TOptions, CosmosClient) This constructor creates a new instance of the CosmoDbRepositoryBase<TOptions, TModel> class. Declaration protected CosmoDbRepositoryBase(TOptions options, CosmosClient client) Parameters Type Name Description TOptions options The options to use for the repository. Microsoft.Azure.Cosmos.CosmosClient client The CosmoDb client to use with the repository. Properties Client This property contains a referenc to a CosmoDb client. Declaration protected CosmosClient Client { get; } Property Value Type Description Microsoft.Azure.Cosmos.CosmosClient Container This property contains a reference to a CosmoDb container. Declaration protected Lazy<Container> Container { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Container > ContainerChecked This property helps us track whether we've verified the underlying container exists, or not. Declaration protected static bool ContainerChecked { get; } Property Value Type Description System.Boolean ContainerName This property contains the name of the CosboDb container. Declaration protected string ContainerName { get; set; } Property Value Type Description System.String Database This property contains a reference to a CosmoDb database. Declaration protected Lazy<Database> Database { get; } Property Value Type Description System.Lazy < Microsoft.Azure.Cosmos.Database > DatabaseChecked This property helps us track whether we've verified the underlying database exists, or not. Declaration protected static bool DatabaseChecked { get; } Property Value Type Description System.Boolean Methods AsQueryable() Declaration public override IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> Overrides CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) Implements CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Linq.CosmoDb.Repositories.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.html",
    "title": "Namespace CG.Linq.CosmoDb.Repositories",
    "keywords": "Namespace CG.Linq.CosmoDb.Repositories Classes CosmoDbCrudRepositoryBase<TOptions, TModel, TKey> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey> interface. CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2> interface. CosmoDbCrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base CosmoDb implementation of the CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. CosmoDbRepositoryBase<TOptions, TModel> This class is a base CosmoDb implementation of the CG.Business.Repositories.ILinqRepository<TModel> interface."
  },
  "api/CG.Linq.CosmoDb.Repositories.Options.CosmoDbRepositoryOptions.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.Options.CosmoDbRepositoryOptions.html",
    "title": "Class CosmoDbRepositoryOptions",
    "keywords": "Class CosmoDbRepositoryOptions This class contains configuration settings for a CosmoDb repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase CG.Business.Repositories.Options.RepositoryOptions CG.Business.Repositories.Options.LinqRepositoryOptions CosmoDbRepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq.CosmoDb.Repositories.Options Assembly : CG.Linq.CosmoDb.dll Syntax public class CosmoDbRepositoryOptions : LinqRepositoryOptions, IValidatableObject Properties DatabaseId This property contains the database identifier to use with the repository. Declaration [Required(ErrorMessageResourceName = \"CosmoRepositoryOptions_DbId\", ErrorMessageResourceType = typeof(Resources))] public string DatabaseId { get; set; } Property Value Type Description System.String DropDatabase This property indicates whether the database should be dropped, if it already exists (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool DropDatabase { get; set; } Property Value Type Description System.Boolean EnsureCreated This property indicates whether the database should be created, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool EnsureCreated { get; set; } Property Value Type Description System.Boolean SeedDatabase This property indicates whether the database should be seeded with data, if needed, at startup (or not). Note, this step is only ever performed when running in the Development environment, in order to prevent horrible accidents in production. Declaration public bool SeedDatabase { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Linq.CosmoDb.Repositories.Options.html": {
    "href": "api/CG.Linq.CosmoDb.Repositories.Options.html",
    "title": "Namespace CG.Linq.CosmoDb.Repositories.Options",
    "keywords": "Namespace CG.Linq.CosmoDb.Repositories.Options Classes CosmoDbRepositoryOptions This class contains configuration settings for a CosmoDb repository."
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.CosmoDb.dll Syntax public static class ApplicationBuilderExtensions Methods UseCosmoDb<TClient, TOptions>(IApplicationBuilder, IWebHostEnvironment, SeedAction<TClient>) This method performs any startup logic required by CosmoDb, such as dropping the underlying database (if needed), or creating the underlying database (if needed), or adding seed data to an otherwise blank database. Declaration public static IApplicationBuilder UseCosmoDb<TClient, TOptions>(this IApplicationBuilder applicationBuilder, IWebHostEnvironment hostEnvironment, SeedAction<TClient> seedDelegate) where TClient : CosmosClient where TOptions : CosmoDbRepositoryOptions Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostEnvironment The hosting environment to use for the operation. SeedAction <TClient> seedDelegate A delegate for seeding the database with startup data. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder The value of the applicationBuilder parameter, for chaining calls together. Type Parameters Name Description TClient The type of associated client. TOptions The type of associated options. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder type. Delegates SeedAction<TClient> This delegate type represents a callback to seed a database."
  },
  "api/Microsoft.AspNetCore.Builder.SeedAction-1.html": {
    "href": "api/Microsoft.AspNetCore.Builder.SeedAction-1.html",
    "title": "Delegate SeedAction<TClient>",
    "keywords": "Delegate SeedAction<TClient> This delegate type represents a callback to seed a database. Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Linq.CosmoDb.dll Syntax public delegate void SeedAction<in TClient>(TClient client, bool wasDropped, bool wasCreated) where TClient : CosmosClient; Parameters Type Name Description TClient client The CosmoDb client to use for the operation. System.Boolean wasDropped Indicates whether the data-context was recently dropped. System.Boolean wasCreated Indicates whether the data-context was recently created. Type Parameters Name Description TClient The type of associated CosmoDb client."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Linq.CosmoDb.dll Syntax public static class ServiceCollectionExtensions Methods AddCosmoDbRepositories<TOptions>(IServiceCollection, IConfiguration, ServiceLifetime) This method loads and registers CosmoDb specific repository options. Declaration public static IServiceCollection AddCosmoDbRepositories<TOptions>(this IServiceCollection serviceCollection, IConfiguration configuration, ServiceLifetime serviceLifetime = ServiceLifetime.Scoped) where TOptions : CosmoDbRepositoryOptions, new() Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime The service lifetime to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Type Parameters Name Description TOptions The type of associated repository options. Exceptions Type Condition System.ArgumentException This exception is thrown whenever one or more arguments are invalid, or missing."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.dll contains LINQ extensions used by other CodeGator packages."
  }
}